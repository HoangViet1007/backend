<?php

namespace App\Services;

use App\Constants\S3Constant;
use App\Constants\StatusConstant;
use App\Exceptions\BadRequestException;
use App\Exceptions\NotFoundException;
use App\Exceptions\SystemException;
use App\Models\CoursePlanes;
use App\Models\Stage;
use Exception;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Facades\Storage;
use Illuminate\Validation\Rule;

class CoursePlaneService extends BaseService
{
    protected array $status = [StatusConstant::ACTIVE, StatusConstant::INACTIVE];

    function createModel(): void
    {
        $this->model = new CoursePlanes();
    }

    public function storeRequestValidate(object $request, array $rules = [], array $messages = []): bool|array
    {
        $rules    = [
            'name'        => [
                'required',
                Rule::unique('course_planes',)->where(function ($query) use ($request) {
                    return $query->where('stage_id', $request->stage_id);
                }),
            ],
            'content'     => 'required',
            'descreption' => 'required',
            'stage_id'    => 'required|exists:stages,id',
            'status'      => 'required|in:' . implode(',', $this->status),
            'image'       => 'required',
            'type'        => 'required|in:' . implode(',', config('constant.type')),
            'video_link' =>  function ($attribute, $value, $fail) {
                if (request()->type == config('constant.type.video')) {
                    if(empty($value)){
                        return $fail("Hãy nhập video cho khóa học !");
                    }
                }
            },


        ];
        $messages = [
            'name.required'        => 'Hãy nhập tên kế hoạch khóa học !',
            'name.unique'          => 'Tên kế hoạch khóa học đã tồn tại !',
            'content.required'     => 'Hãy nhập mô tả cho kế hoạch khóa học !',
            'descreption.required' => 'Hãy nhập mô tả ngắn cho kế hoạch khóa học !',
            'stage_id.required'    => 'Hãy chọn giai đoạn của khóa học  !',
            'stage_id.exists'      => 'Giai đoạn của khóa học không tồn tại !',
            'status.required'      => 'Hãy chọn trạng thái hoạt động !',
            'status.in'            => 'Trạng thái hoạt động không hợp lệ !',
            'image.required'       => 'Xin mời bạn nhập ảnh',
            'type.required'        => 'Hãy nhập kiểu học cho kế hoạch khóa học',
            'type.in'              => 'Kiểu học không hợp lệ !'

        ];

        return parent::storeRequestValidate($request, $rules, $messages); // TODO: Change the autogenerated stub
    }


    public function updateRequestValidate(int|string $id, object $request, array $rules = [],
                                          array      $messages = []): bool|array
    {
        $rules    = [
            'name'        => [
                'required',
                Rule::unique('course_planes',)->where(function ($query) use ($request, $id) {
                    return $query->where('stage_id', $request->stage_id)
                                 ->where('id', '!=', $id);
                }),
            ],
            'content'     => 'required',
            'descreption' => 'required',
            'stage_id'    => 'required|exists:stages,id',
            'status'      => 'required|in:' . implode(',', $this->status),
            'image'       => 'required',
            'type'        => 'required|in:' . implode(',', config('constant.type')),
            'video_link' =>  function ($attribute, $value, $fail) {
                if (request()->type == config('constant.type.video')) {
                    if(empty($value)){
                        return $fail("Hãy nhập video cho khóa học !");
                    }
                }
            },

        ];
        $messages = [
            'name.required'        => 'Hãy nhập tên kế hoạch khóa học !',
            'name.unique'          => 'Tên kế hoạch khóa học đã tồn tại !',
            'content.required'     => 'Hãy nhập mô tả cho kế hoạch khóa học !',
            'descreption.required' => 'Hãy nhập mô tả ngắn cho kế hoạch khóa học !',
            'stage_id.required'    => 'Hãy chọn giai đoạn của khóa học  !',
            'stage_id.exists'      => 'Giai đoạn của khóa học không tồn tại !',
            'status.required'      => 'Hãy chọn trạng thái hoạt động !',
            'status.in'            => 'Trạng thái hoạt động không hợp lệ !',
            'image.required'       => 'Xin mời bạn nhập ảnh',
            'type.required'        => 'Hãy nhập kiểu học cho kế hoạch khóa học',
            'type.in'              => 'Kiểu học không hợp lệ !'
        ];


        return parent::updateRequestValidate($id, $request, $rules, $messages); // TODO: Change the autogenerated stub
    }

    public function listCoursePlanes($id)
    {
        try {
            $userID = self::currentUser()->id;

            $response = Stage::where('id', $id)->with('course', 'course_planes')->get();
            $idUser   = '';
            foreach ($response as $podcast) {
                if ($podcast->course != null) {
                    $idUser = $podcast->course->created_by;
                }
            }

            if ($userID == $idUser) {
                return $response;
            } else {
                return [];
            }

        } catch (Exception $e) {
            throw new SystemException($e->getMessage() ?? __('system-500'), $e);
        }

    }


//    public function preAdd(object $request)
//    {
 // Updload video to S3
//        $url = '';
//        if (!empty($request->file('video_link'))) {
//            $path = Storage::disk('s3')->put('images/originals', $request->file('video_link'), 'public');
//
//            $url = S3Constant::LINK_S3 . $path;
//
//        }
//        $request->video_link = $url;
//        parent::preAdd($request);
//    }

    public function preUpdate($id, $request)
    {
        $item = $this->get($id);

        if ($item) {
            if($request->type == config('constant.type.image')) {
               $request['video_link'] = '';
            }
            else{
                if($request->type == config('constant.type.video') && $request->video_link == ''){
                    throw new BadRequestException(
                        ['message' => "Hãy nhập video cho khóa học !"], new Exception()
                    );
                }
            }

            // check xem co ai dang hoc khoa hoc ma buoi hoc nay dc asssign hay ko
            $stage_id      = $item->stage_id;
            $course_id     = Stage::find($stage_id)->course_id;
            $courseService = new CourseService();
            if ($courseService->countUserLearning($course_id) > 0) {
                throw new BadRequestException(
                    ['message' => "Cập nhập giai đoạn không thành công !"], new Exception()
                );
            }

            // update video to S3
//            $result = str_replace(env('S3_URL'), '', $item->video_link);
//            Storage::disk('s3')->delete($result);
//            if (!empty($request->file('video_link')) || $request->file('video_link') != "") {
//                $path                = Storage::disk('s3')
//                                              ->put('images/originals', $request->file('video_link'), 'public');
//                $url                 = S3Constant::LINK_S3 . $path;
//                $request->video_link = $url;
//            } else {
//                $request->video_link = $item->video_link;
//            }
        }
        parent::preUpdate($id, $request);

    }

    public function postUpdate(int|string $id, object $request, Model $model)
    {
        $item          = $this->get($id);
        $stage_id      = $item->stage_id;
        $course_id     = Stage::find($stage_id)->course_id;
        $courseService = new CourseService();
        $courseService->updateStatusCoursePending($course_id);
        parent::postUpdate($id, $request, $model);
    }


    public function preDelete($id)
    {
        // check khi xoa buoi hoc co ai dang hoc k
        $item = $this->get($id);
        if ($item) {
            $stage_id      = $item->stage_id;
            $course_id     = Stage::find($stage_id)->course_id;
            $courseService = new CourseService();
            if ($courseService->countUserLearning($course_id) > 0) {
                throw new BadRequestException(
                    ['message' => __("Xoá buổi học không thành công !")], new Exception()
                );
            }

            $result = str_replace(S3Constant::LINK_S3, '', $item->video_link);
//            Storage::disk('s3')->delete($result);
        }
        parent::preDelete($id);

    }

    public function detailCoursePlanes($id){
        try {
            $this->model = $this->model->with('cousre');
            $entity = $this->model->findOrFail($id);

            return $entity;
        } catch (ModelNotFoundException $e) {
            throw new NotFoundException(
                ['message' => __("not-exist", ['attribute' => __('entity')]) . ": $id"],
                $e
            );
        } catch (Exception $e) {
            throw new SystemException($e->getMessage() ?? __('system-500'), $e);
        }
    }
}
